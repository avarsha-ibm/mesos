diff --git a/src/symbolize.cc b/src/symbolize.cc
index 30836de..3e90573 100644
--- a/src/symbolize.cc
+++ b/src/symbolize.cc
@@ -232,7 +232,7 @@
     }
     char header_name[kMaxSectionNameLen];
     if (sizeof(header_name) < name_len) {
-      RAW_LOG(WARNING, "Section name '%s' is too long (%"PRIuS"); "
+      RAW_LOG(WARNING, "Section name '%s' is too long (%" PRIuS "); "
               "section will not be found (even if present).", name, name_len);
       // No point in even trying.
       return false;
diff --git a/src/glog/stl_logging.h.in b/src/glog/stl_logging.h.in
index 30836de..3e90573 100644
--- a/src/glog/stl_logging.h.in
+++ b/src/glog/stl_logging.h.in
@@ -50,10 +50,13 @@
 #include <utility>
 #include <vector>
 
-#ifdef __GNUC__
+#if defined (__GNUC__) && !defined(_LIBCPP_VERSION)
 # include <ext/hash_set>
 # include <ext/hash_map>
 # include <ext/slist>
+#elif defined(_LIBCPP_VERSION)
+# include <unordered_map>
+# include <unordered_set>
 #endif
 
 // Forward declare these two, and define them after all the container streams
@@ -80,7 +83,7 @@ inline std::ostream& operator<<(std::ostream& out, \
 OUTPUT_TWO_ARG_CONTAINER(std::vector)
 OUTPUT_TWO_ARG_CONTAINER(std::deque)
 OUTPUT_TWO_ARG_CONTAINER(std::list)
-#ifdef __GNUC__
+#if defined (__GNUC__) && !defined(_LIBCPP_VERSION)
 OUTPUT_TWO_ARG_CONTAINER(__gnu_cxx::slist)
 #endif
 
@@ -109,9 +112,12 @@ inline std::ostream& operator<<(std::ostream& out, \
 
 OUTPUT_FOUR_ARG_CONTAINER(std::map)
 OUTPUT_FOUR_ARG_CONTAINER(std::multimap)
-#ifdef __GNUC__
+#if defined (__GNUC__) && !defined(_LIBCPP_VERSION)
 OUTPUT_FOUR_ARG_CONTAINER(__gnu_cxx::hash_set)
 OUTPUT_FOUR_ARG_CONTAINER(__gnu_cxx::hash_multiset)
+#elif defined(_LIBCPP_VERSION)
+OUTPUT_FOUR_ARG_CONTAINER(std::unordered_set)
+OUTPUT_FOUR_ARG_CONTAINER(std::unordered_multiset)
 #endif
 
 #undef OUTPUT_FOUR_ARG_CONTAINER
@@ -124,9 +130,12 @@ inline std::ostream& operator<<(std::ostream& out, \
   return out; \
 }
 
-#ifdef __GNUC__
+#if defined (__GNUC__) && !defined(_LIBCPP_VERSION)
 OUTPUT_FIVE_ARG_CONTAINER(__gnu_cxx::hash_map)
 OUTPUT_FIVE_ARG_CONTAINER(__gnu_cxx::hash_multimap)
+#elif defined(_LIBCPP_VERSION)
+OUTPUT_FIVE_ARG_CONTAINER(std::unordered_map)
+OUTPUT_FIVE_ARG_CONTAINER(std::unordered_multimap)
 #endif
 
 #undef OUTPUT_FIVE_ARG_CONTAINER
diff --git a/src/stl_logging_unittest.cc b/src/stl_logging_unittest.cc
index 5dcbc44..ee344ca 100644
--- a/src/stl_logging_unittest.cc
+++ b/src/stl_logging_unittest.cc
@@ -39,7 +39,7 @@
 #include <string>
 #include <vector>
 
-#ifdef __GNUC__
+#if defined (__GNUC__) && !defined(_LIBCPP_VERSION)
 # include <ext/hash_map>
 # include <ext/hash_set>
 #endif
@@ -48,7 +48,7 @@
 #include "googletest.h"
 
 using namespace std;
-#ifdef __GNUC__
+#if defined (__GNUC__) && !defined(_LIBCPP_VERSION)
 using namespace __gnu_cxx;
 #endif
 
@@ -83,7 +83,7 @@ void TestSTLLogging() {
     CHECK_EQ(m, copied_m);  // This must compile.
   }
 
-#ifdef __GNUC__
+#if defined (__GNUC__) && !defined(_LIBCPP_VERSION)
   {
     // Test a hashed simple associative container.
     hash_set<int> hs;
@@ -98,7 +98,7 @@ void TestSTLLogging() {
   }
 #endif
 
-#ifdef __GNUC__
+#if defined (__GNUC__) && !defined(_LIBCPP_VERSION)
   {
     // Test a hashed pair associative container.
     hash_map<int, string> hm;
@@ -145,7 +145,7 @@ void TestSTLLogging() {
     CHECK_EQ(m, copied_m);  // This must compile.
   }
 
-#ifdef __GNUC__
+#if defined (__GNUC__) && !defined(_LIBCPP_VERSION)
   {
     // Test a hashed simple associative container.
     // Use a user defined hash function.
diff --git a/src/demangle.cc b/src/demangle.cc
index 0daf308..1136e0d 100644
--- a/src/demangle.cc
+++ b/src/demangle.cc
@@ -167,7 +167,7 @@ static size_t StrLen(const char *str) {
 // Returns true if "str" has at least "n" characters remaining.
 static bool AtLeastNumCharsRemaining(const char *str, int n) {
   for (int i = 0; i < n; ++i) {
-    if (str == '\0') {
+    if (str[i] == '\0') {
       return false;
     }
   }
@@ -223,7 +223,7 @@ static bool ParseTwoCharToken(State *state, const char *two_char_token) {
 // Returns true and advances "mangled_cur" if we find any character in
 // "char_class" at "mangled_cur" position.
 static bool ParseCharClass(State *state, const char *char_class) {
-  if (state->mangled_cur == '\0') {
+  if (state->mangled_cur[0] == '\0') {
     return false;
   }
   const char *p = char_class;
diff --git a/m4/pc_from_ucontext.m4 b/m4/pc_from_ucontext.m4
index daffddb..5386234 100644
--- a/m4/pc_from_ucontext.m4
+++ b/m4/pc_from_ucontext.m4
@@ -20,6 +20,7 @@ AC_DEFUN([AC_PC_FROM_UCONTEXT],
    pc_fields="$pc_fields uc_mcontext.uc_regs->gregs[[PT_NIP]]" # Linux (ppc)
    pc_fields="$pc_fields uc_mcontext.gregs[[R15]]"     # Linux (arm old [untested])
    pc_fields="$pc_fields uc_mcontext.arm_pc"           # Linux (arm new [untested])
+   pc_fields="$pc_fields uc_mcontext.psw.addr"         # Linux (s390x)
    pc_fields="$pc_fields uc_mcontext.mc_eip"           # FreeBSD (i386)
    pc_fields="$pc_fields uc_mcontext.mc_rip"           # FreeBSD (x86_64 [untested])
    pc_fields="$pc_fields uc_mcontext.__gregs[[_REG_EIP]]"  # NetBSD (i386)
diff --git a/src/signalhandler_unittest.sh b/src/signalhandler_unittest.sh
index 265cd45..4be7f9e 100755
--- a/src/signalhandler_unittest.sh
+++ b/src/signalhandler_unittest.sh
@@ -74,7 +74,12 @@ fi

 # Test for a case the program kills itself by SIGSEGV.
 GOOGLE_LOG_DIR=. $BINARY segv 2> signalhandler.out1
-for pattern in SIGSEGV 0xdead main "Aborted at [0-9]"; do
+if [ x`uname -p` = x"s390x" ]; then
+       DEAD=0xd000     #s390x only returns page address in segv signal handler
+else
+       DEAD=0xdead
+fi
+for pattern in SIGSEGV $DEAD main "Aborted at [0-9]"; do
   if ! grep --quiet "$pattern" signalhandler.out1; then
     die "'$pattern' should appear in the output"
   fi
